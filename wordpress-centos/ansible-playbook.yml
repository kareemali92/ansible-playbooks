---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Disable SELinux
      selinux:
      state: disabled

    - name: install httpd*
      yum: name={{ item }} update_cache=yes state=latest
      loop: ['httpd','mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'libapache2-mod-php']
      tags: [ system ]

    - name: Install PHP Extensions
      yum: name={{ item }} update_cache=yes state=latest
      loop: "{{ php_modules }}"
      tags: [ system ]

  # Apache Configuration
    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'
      tags: [ apache ]

    - name: Set up Apache VirtualHost
      template:
        src: "files/httpd.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"
      notify:
      - restart apache
      tags: [ apache ]

    - name: Enable rewrite module
      shell: /usr/sbin/a2enmod rewrite
      notify:
      - restart apache
      tags: [ apache ]

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      notify:
      - restart apache
      tags: [ apache ]

  # MySQL Configuration
    - name: Set the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql, mysql-root ]

    - name: Remove all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Remove the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]


  # WordPress Configuration
    - name: Download and unpack latest WordPress
      unarchive:
        src: "/tmp/"
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/"
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wp-config.php"
      tags: [ wordpress ]

    - name: "Create required directories in /etc/letsencrypt"
      file:
        path: "/etc/letsencrypt/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=x,o=x
      with_items:
      - account
      - certs
      - csrs
      - keys

    - name: "Generate a Let's Encrypt account key"
      shell: "if [ ! -f {{ letsencrypt_account_key }} ]; then openssl genrsa 4096 | sudo tee {{ letsencrypt_account_key }}; fi"

    - name: "Generate Let's Encrypt private key"
      shell: "openssl genrsa 4096 | sudo tee /etc/letsencrypt/keys/{{ domain_name }}.key"

    - name: "Generate Let's Encrypt CSR"
      shell: "openssl req -new -sha256 -key /etc/letsencrypt/keys/{{ domain_name }}.key -subj \"/CN={{ domain_name }}\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"\n[SAN]\nsubjectAltName=DNS:{{ domain_name }},DNS:www.{{ domain_name }}\")) | sudo tee /etc/letsencrypt/csrs/{{ domain_name }}.csr"
      args:
        executable: /bin/bash

    - name: "Begin Let's Encrypt challenges"
      letsencrypt:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        terms_agreed: 1
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}.crt"
        remaining_days: 91
      register: acme_challenge_your_domain

    - name: "Create .well-known/acme-challenge directory"
      file:
        path: /var/www/html/.well-known/acme-challenge
        state: directory
        owner: root
        group: root
        mode: u=rwx,g=rx,o=rx

    - name: "Implement http-01 challenge files"
      copy:
        content: "{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource_value'] }}"
        dest: "/var/www/html/{{ acme_challenge_your_domain['challenge_data'][item]['http-01']['resource'] }}"
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      with_items:
      - "{{ domain_name }}"
      - "www.{{ domain_name }}"

    - name: "Complete Let's Encrypt challenges"
      letsencrypt:
        acme_directory: "{{ acme_directory }}"
        acme_version: "{{ acme_version }}"
        account_key_src: "{{ letsencrypt_account_key }}"
        account_email: "{{ acme_email }}"
        challenge: "{{ acme_challenge_type }}"
        csr: "{{ letsencrypt_csrs_dir }}/{{ domain_name }}.csr"
        dest: "{{ letsencrypt_certs_dir }}/{{ domain_name }}.crt"
        chain_dest: "{{ letsencrypt_certs_dir }}/chain_{{ domain_name }}.crt"
        fullchain_dest: "{{ letsencrypt_certs_dir }}/fullchain_{{ domain_name }}"
        data: "{{ acme_challenge_your_domain }}"

  handlers:
    - name: Reload Apache
      service:
        name: apache
        state: reloaded

    - name: Restart Apache
      service:
        name: apache
        state: restarted