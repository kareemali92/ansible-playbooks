---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Disable SELinux
      selinux:
        state: disabled
    
    - name: "Installing rem7 Repo"
      shell: sudo rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-7.rpm
      ignore_errors: yes

    - name: install httpd*
      yum: name={{ item }} update_cache=yes state=latest enablerepo="remi-php73"
      loop: ['httpd', 'php']
      tags: [ system ]

    - name: Install PHP Extensions
      yum: name={{ item }} update_cache=yes state=latest enablerepo="remi-php73"
      loop: "{{ php_modules }}"
      tags: [ system ]

  # Apache Configuration
    - name: Create document root
      file:
        path: "{{ host_dir }}/{{ http_dir }}"
        state: directory
        owner: "apache"
        group: "apache"
        mode: '0755'
      tags: [ apache ]

    - name: Create available-sites
      file:
        path: "{{ item }}"
        state: directory
      loop:
      - /etc/httpd/sites-enabled
      - /etc/httpd/sites-available

    - name: activate sites-enabled
      lineinfile:
        path: "/etc/httpd/conf/httpd.conf"
        line: "IncludeOptional sites-enabled/*.conf" 
   
    - name: Set up Apache VirtualHost
      template:
        src: "files/httpd.conf.j2"
        dest: "/etc/httpd/sites-available/{{ http_conf }}"
      notify:
      - restart apache
      tags: [ apache ]

    - name: create symlink to site
      file: src="/etc/httpd/sites-available/{{ http_conf }}" dest="/etc/httpd/sites-enabled/{{ http_conf }}" state=link 
      notify: apache reload

  # MySQL Configuration
    - name: "Installing Repo"
      shell: sudo rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm
      ignore_errors: yes

    - name: "Installing MySQL 5.7"
      yum: name={{ item }} enablerepo="mysql57-community"
      loop: ['mysql-community-server', 'mysql-community-client', 'MySQL-python', 'python2-PyMySQL']
  
    - name: Start the MySQL service
      become: true
      service: 
        name: mysqld
        state: started
        enabled: true

    # MySQL 
    - name: Ensure mySQL is running and starts on boot
      service: name=mysql state=started enabled=true

    - name: Stop MySQL
      service: name=mysql state=stopped
    - name: set environment variables
      shell: systemctl set-environment MYSQLD_OPTS="--skip-grant-tables"
    - name: Start MySQL
      service: name=mysql state=started
    - name: sql query
      command:  mysql -u root --execute="ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '"{{ mysql_root_password }}"';"
    - name: Create ~/.my.cnf
      file:
        path: ~/.my.cnf
        state: touch
    - name: Insert into ~/.my.cnf
      blockinfile:
        path: ~/.my.cnf
        block: |
          [client]
          user={{ mysql_user }}
          password={{ mysql_root_password }}
    - name: sql query flush
    command:  mysql -u root --execute="FLUSH PRIVILEGES"
    - name: Stop MySQL
    service: name=mysql state=stopped
    - name: unset environment variables
    shell: systemctl unset-environment MYSQLD_OPTS
    - name: Start MySQL
    service: name=mysql state=started

    - name: Set MySQL root password
      mysql_user:
        login_user: 'root'
        login_password: ''
        name: 'root'
        priv: '*.*:ALL,GRANT'
        host_all: yes
        check_implicit_admin: true
        password: '{{ mysql_root_password }}'
        state: present
      notify: restart mysql

    - name: Creates database for WordPress
      mysql_db:
        name: '{{ mysql_db }}'
        state: present
        login_user: root
        login_password: '{{ mysql_root_password }}'
      tags: [ mysql ]
    
    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Import blog.sql to {{ mysql_db }} database
      mysql_db:
        state: import
        name: '{{ mysql_db }}'
        target: /tmp/blog.sql


  # WordPress Configuration

    - name: ensure wordpress directory exists
      file:
        path: {{ host_dir }}/{{ http_dir }}
        state: directory

    - name: Download and unpack latest WordPress
      unarchive:
        src: "{{ host_dir }}/blog-wuzzuf.tar.gz"
        dest: "{{ host_dir }}/{{ http_dir }}"
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "{{ host_dir }}/{{ http_dir }}"
        state: directory
        recurse: yes
        owner: apache
        group: apache
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find {{ host_dir }}/{{ http_dir }}/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find {{ host_dir }}/{{ http_dir }}/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "{{ host_dir }}/{{ http_dir }}/wp-config.php"
      tags: [ wordpress ]

  handlers:
    - name: Reload Apache
      service:
        name: apache
        state: reloaded

    - name: Restart Apache
      service:
        name: apache
        state: restarted
